# The following is the steps one would typically perform whilst
# building a new version of the kernel and setting up a new 
# development enviroment

KERNEL_DWNLD_URL=https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.14.15.tar.xz 

# To download the package lists and update them to point to the newest version of 
# packages and their dependencies, run 
sudo apt-get update

# Download some of the pre-requisite packages like make, fakeroot, ncurses-dev,
# build-essential etc. This list can be kept to minimal packages needed and 
# packages can be installed as needed.
sudo apt-get install git make fakeroot libelf-dev build-essential ncurses-dev xz-utils libssl-dev bc

# Get the latest stable version of the linux kernel ($KERNEL_DWNLD_URL can be updated
# to point to the right URL to use)
echo -e "Downloading linux kernel image...\n"

wget $KERNEL_DWNLD_URL

echo -e "Linux kernel image download done.\n"

# Untar the kernel source
linux_ker_tar_filename=`echo $KERNEL_DWNLD_URL | awk -F "/" '{print $NF}'`
linux_version=`echo $linux_ker_tar_filename | awk -F "-" '{print $2}' | awk -F ".tar" '{print $1}'`

echo -e "Untaring linux kernel image...\n"
tar -xf $linux_ker_tar_filename

linux_folder_name=`echo $linux_ker_tar_filename | awk -F ".tar" '{print $1}'`

echo -e "Untar done.\n"

# change directory (cd) to linux directory
cd $linux_folder_name 

# Configure the linux kernel
# We can do this in a couple of ways:
# 1. Copy the config file of the existing kernel distro into CWD as .config file
# 	cp /boot/config-$(uname -r) .config

# 2. Call make menuconfig/gconfig/xconfig 
#	- some dependent packages might have to installed to get the option to work
#	- for ex. ncurses-dev is used by menuconfig to configure kernel options

cp /boot/config-`uname -r` .config

echo -e "Building linux kernel...\n"

# We can still run make menuconfig/gconfig/xconfig to change some of the options/
# configurations 
make menuconfig
#make oldconfig

# Build the kernel
make -j`nproc --all`

echo -e "Kernel build done.\n"

echo -e "Installing kernel modules...\n"

# Install the kernel modules
make -j`nproc --all` modules_install

echo -e "Kernel modules install done.\n"

echo -e "Installing kernel...\n"
 
# Finally to copy the kernel and .config file to /boot folder and generate system.map
# file, we run 
make -j`nproc --all` install

echo -e "Kernel install done.\n"

# Once the kernel and its modules are compiled and installed, to use the new kernel 
# from the next boot up, we run

echo -e "Updating initramfs and grub..."

update-initramfs -c -k $linux_version

# To have the GRUB automatically look for the available kernels in the /boot folder, 
# we need to run the following command to add the kernels to the grub's config file

update-grub
update-grub2 

echo -e "Kernel build and install done.\n"
